From 1d112038134b79f019ee5d557680a53c36a6cf42 Mon Sep 17 00:00:00 2001
From: Dustin Lang <dstndstn@gmail.com>
Date: Thu, 16 Jul 2020 16:06:34 -0400
Subject: [PATCH] don't bother trying to use system qsort, just use our shipped
 QSORT_R

---
 __init__.py                       |  2 +-
 stellarsolver/astrometry/include/astrometry/ioutils.h      | 10 +++++
 stellarsolver/astrometry/include/astrometry/os-features.h  | 62 ++++++++++---------------------
 stellarsolver/astrometry/include/astrometry/permutedsort.h |  2 +-
 stellarsolver/astrometry/util/ioutils.c                    |  2 +
 stellarsolver/astrometry/util/os-features-test.c           | 57 ----------------------------
 stellarsolver/astrometry/util/os-features.c                |  3 --
 stellarsolver/astrometry/util/permutedsort.c               |  3 +-
 stellarsolver/astrometry/util/qsort_reentrant.c            | 36 +++++-------------
 9 files changed, 44 insertions(+), 133 deletions(-)

diff --git a/stellarsolver/astrometry/include/astrometry/ioutils.h b/stellarsolver/astrometry/include/astrometry/ioutils.h
index 809d1cec5..329fccebf 100644
--- a/stellarsolver/astrometry/include/astrometry/ioutils.h
+++ b/stellarsolver/astrometry/include/astrometry/ioutils.h
@@ -17,6 +17,16 @@
 
 extern uint32_t ENDIAN_DETECTOR;
 
+void QSORT_R(void* base, size_t nmembers, size_t member_size,
+             void* token, int (*compar)(void *, const void *, const void *));
+
+/**
+   You should define the "comparison" function like this:
+
+   static int QSORT_COMPARISON_FUNCTION(my_comparison, void* token, const void* v1, const void* v2) {
+ */
+#define QSORT_COMPARISON_FUNCTION(func, thunk, v1, v2) func(thunk, v1, v2)
+
 int copy_file(const char* infn, const char* outfn);
 
 int pad_fid(FILE* fid, size_t len, char pad);
diff --git a/stellarsolver/astrometry/include/astrometry/os-features.h b/stellarsolver/astrometry/include/astrometry/os-features.h
index 9fcb1f0c7..176b8d320 100644
@@ -61,6 +55,17 @@ char* canonicalize_file_name(const char* fn);
 
 #endif
 
+
+// As suggested in http://gcc.gnu.org/onlinedocs/gcc-4.3.0/gcc/Function-Names.html
+#if __STDC_VERSION__ < 199901L
+# if __GNUC__ >= 2
+#  define __func__ __FUNCTION__
+# else
+#  define __func__ "<unknown>"
+# endif
+#endif
+
+
 /**
    The qsort_r story:
 
@@ -74,19 +79,19 @@ char* canonicalize_file_name(const char* fn);
                       int (*)(const void*, const void*, void*),
                       void*);
 
+   (Distributions including glibc 2.8 include:
+   -Mandriva 2009
+   -Ubuntu 8.10)
+
    Notice that the "thunk" and "comparison function" arguments to qsort_r are
    swapped, and the "thunk" appears either at the beginning or end of the comparison
    function.
 
-   We check a few things:
-   -is qsort_r declared?
-   -does qsort_r exist?
-   -do we need to swap the arguments?
+   Previously, we did fancy footwork to detect and use a system version.
 
-   Those using qsort_r in Astrometry.net should instead use the macro QSORT_R()
-   to take advantage of these tests.
+   Now, just ship a FreeBSD version!
 
-   Its signature is:
+   In Astrometry.net should instead use QSORT_R:
 
    void QSORT_R(void* base, size_t nmembers, size_t member_size,
                 void* token, comparison_function);
@@ -97,36 +102,7 @@ char* canonicalize_file_name(const char* fn);
      ...
    }
 
-
-   Distributions including glibc 2.8 include:
-   -Mandriva 2009
-   -Ubuntu 8.10
+   See ioutils.[ch]
 */
 
-#if NEED_DECLARE_QSORT_R
-//// NOTE: this declaration must match os-features-test.c .
-void qsort_r(void *base, size_t nmemb, size_t sz,
-             void *userdata,
-             int (*compar)(void *, const void *, const void *));
-#endif
-
-#if NEED_SWAP_QSORT_R
-#define QSORT_R(a,b,c,d,e) qsort_r(a,b,c,e,d)
-#define QSORT_COMPARISON_FUNCTION(func, thunk, v1, v2) func(v1, v2, thunk)
-
-#else
-#define QSORT_R qsort_r
-#define QSORT_COMPARISON_FUNCTION(func, thunk, v1, v2) func(thunk, v1, v2)
-
-#endif
-
-// As suggested in http://gcc.gnu.org/onlinedocs/gcc-4.3.0/gcc/Function-Names.html
-#if __STDC_VERSION__ < 199901L
-# if __GNUC__ >= 2
-#  define __func__ __FUNCTION__
-# else
-#  define __func__ "<unknown>"
-# endif
-#endif
-
 #endif
diff --git a/stellarsolver/astrometry/include/astrometry/permutedsort.h b/stellarsolver/astrometry/include/astrometry/permutedsort.h
index 23c1a7e98..d35901608 100644
--- a/stellarsolver/astrometry/include/astrometry/permutedsort.h
+++ b/stellarsolver/astrometry/include/astrometry/permutedsort.h
@@ -7,7 +7,7 @@
 #define PERMUTED_SORT_H
 
 // for QSORT_COMPARISON_FUNCTION
-#include "os-features.h"
+#include "ioutils.h"
 
 /*
  Computes the permutation array that will cause the "realarray" to be
diff --git a/stellarsolver/astrometry/util/ioutils.c b/stellarsolver/astrometry/util/ioutils.c
index b9d33b757..38375097f 100644
--- a/stellarsolver/astrometry/util/ioutils.c
+++ b/stellarsolver/astrometry/util/ioutils.c
@@ -33,6 +33,8 @@
 
 uint32_t ENDIAN_DETECTOR = 0x01020304;
 
+#include "qsort_reentrant.c"
+
 int copy_file(const char* infn, const char* outfn) {
     FILE* fin = fopen(infn, "rb");
     FILE* fout = fopen(outfn, "wb");
diff --git a/stellarsolver/astrometry/util/os-features-test.c b/stellarsolver/astrometry/util/os-features-test.c
index 41c86ed2f..51d533c3a 100644
--- a/stellarsolver/astrometry/util/os-features-test.c
+++ b/stellarsolver/astrometry/util/os-features-test.c
@@ -5,62 +5,6 @@
 }
 #endif
 
-#ifdef TEST_QSORT_R
-static int cmp(void* u, const void* a, const void* b) {
-    return 0;
-}
-int main() {
-    int array;
-    int baton;
-    qsort_r(&array, 1, sizeof(int), &baton, cmp);
-    //printf("#define NEED_QSORT_R 0\n");
-    return 0;
-}
-#endif
-
-#ifdef TEST_DECLARE_QSORT_R
-// Test whether just declaring qsort_r as we do causes a compile failure.
-
-void qsort_r(void *base, size_t nmemb, size_t sz,
-             void *userdata,
-             int (*compar)(void *, const void *, const void *));
-
-int main() {
-    //printf("#define NEED_DECLARE_QSORT_R 1\n");
-    return 0;
-}
-#endif
-
-#ifdef TEST_SWAP_QSORT_R
-// Use the result of TEST_DECLARE_QSORT_R and TEST_NEED_QSORT_R, or else
-// this test will fail with a warning about undefined qsort_r
-// Include .c rather than .h because we test with:
-//     gcc -o (exec) os-features-test.c
-// and if NEED_QSORT_R, os-features.c includes qsort_reentrant.c
-#include "os-features-config.h.tmp"
-#define DONT_INCLUDE_OS_FEATURES_CONFIG_H 1
-#include "os-features.c"
-#undef DONT_INCLUDE_OS_FEATURES_CONFIG_H
-// Test whether qsort_r works unswapped. (ie, qsort_r matches the definition of
-// QSORT_R defined in the os-features.h documentation.)
-static int sortfunc(void* thunk, const void* v1, const void* v2) {
-    const int* i1 = v1;
-    const int* i2 = v2;
-    if (*i1 < *i2)
-        return -1;
-    if (*i1 > *i2)
-        return 1;
-    return 0;
-}
-int main() {
-    int array[] = { 4, 17, 88, 34, 12, 12, 17 };
-    int N = sizeof(array)/sizeof(int);
-    int mythunk = 42;
-    qsort_r(array, N, sizeof(int), &mythunk, sortfunc);
-    //printf("#define NEED_SWAP_QSORT_R 0\n");
-    return 0;
-}
-#endif
 
 #if defined(TEST_NETPBM) || defined(TEST_NETPBM_MAKE)
 #include <pam.h>
diff --git a/stellarsolver/astrometry/util/os-features.c b/stellarsolver/astrometry/util/os-features.c
index 0aa856194..673a6bee2 100644
--- a/stellarsolver/astrometry/util/os-features.c
+++ b/stellarsolver/astrometry/util/os-features.c
@@ -9,6 +9,3 @@
 //}
 //#endif
 
-#if NEED_QSORT_R
-#include "qsort_reentrant.c"
-#endif
diff --git a/stellarsolver/astrometry/util/permutedsort.c b/stellarsolver/astrometry/util/permutedsort.c
index 91b4c6a8d..c04c1fe29 100644
--- a/stellarsolver/astrometry/util/permutedsort.c
+++ b/stellarsolver/astrometry/util/permutedsort.c
@@ -11,7 +11,8 @@
 #endif
 
 #include "permutedsort.h"
-#include "os-features.h" // for qsort_r
+#include "os-features.h"
+#include "ioutils.h"
 
 int* permutation_init(int* perm, int N) {
     int i;
diff --git a/stellarsolver/astrometry/util/qsort_reentrant.c b/stellarsolver/astrometry/util/qsort_reentrant.c
index b5a7818c3..5f2447592 100644
--- a/stellarsolver/astrometry/util/qsort_reentrant.c
+++ b/stellarsolver/astrometry/util/qsort_reentrant.c
@@ -35,14 +35,13 @@
 #endif
 //__FBSDID("$FreeBSD: src/sys/libkern/qsort.c,v 1.15 2004/07/15 23:58:23 glebius Exp $");
 
-// Astrometry: We want reentrant!
-#define I_AM_QSORT_R
+// Astrometry.net: we lightly modified this file:
+// - renamed qsort_r to QSORT_R to avoid clashes with system version
+// - removed the preprocessor magic that support re-entrant and non-
+//   functions in the same source code.
 
-#ifdef  I_AM_QSORT_R
 typedef int             cmp_t(void *, const void *, const void *);
-#else
-typedef int             cmp_t(const void *, const void *);
-#endif
+
 static __inline char    *med3(char *, char *, char *, cmp_t *, void *);
 static __inline void     swapfunc(char *, char *, int, int);
 
@@ -84,32 +83,18 @@ swapfunc(char *a, char *b, int n, int swaptype)
 
 #define vecswap(a, b, n)        if ((n) > 0) swapfunc(a, b, n, swaptype)
 
-#ifdef I_AM_QSORT_R
 #define CMP(t, x, y) (cmp((t), (x), (y)))
-#else
-#define CMP(t, x, y) (cmp((x), (y)))
-#endif
 
 static __inline char *
-med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk
-#ifndef I_AM_QSORT_R
-__unused
-#endif
-)
+med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
 {
         return CMP(thunk, a, b) < 0 ?
                (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a ))
               :(CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c ));
 }
 
-#ifdef I_AM_QSORT_R
 void
-qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
-#else
-#define thunk NULL
-void
-qsort(void *a, size_t n, size_t es, cmp_t *cmp)
-#endif
+QSORT_R(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
 {
         char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
         int d, r, swaptype, swap_cnt;
@@ -177,11 +162,8 @@ loop:   SWAPINIT(a, es);
         r = min(pd - pc, pn - pd - es);
         vecswap(pb, pn - r, r);
         if ((r = pb - pa) > es)
-#ifdef  I_AM_QSORT_R
-                qsort_r(a, r / es, es, thunk, cmp);
-#else
-                qsort(a, r / es, es, cmp);
-#endif
+                QSORT_R(a, r / es, es, thunk, cmp);
+
         if ((r = pd - pc) > es) {
                 /* Iterate rather than recurse to save stack space */
                 a = pn - r;
